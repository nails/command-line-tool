#!/bin/bash

curDir="$(pwd)"
version="0.10.3"
consolePath="${curDir}/vendor/nails/module-console/console.php"

TITLE='\033[0;32m'
COMMENT='\033[0;33m'
BOLD_COMMENT='\033[1m'
ERROR='\033[31m'
NC='\033[0m'

if [ ! -f "$consolePath" ]
    then
    consolePath="${curDir}/nails.php"
fi

# ------------------
# Creates a new Nails application.
# ------------------
if [ "$1" == "new" ]
    then

    # Do we have a folder name?
    if [ "$2" != "" ]
        then
        mkdir "$2"
        cd "$2"
        curDir="$(pwd)"
    fi

    # Directory empty?
    if find "$curDir" -maxdepth 0 -empty | read;
        then

        # Reset the consolePath variable to the new style
        consolePath="${curDir}/vendor/nails/module-console/console.php"

        echo ""
        echo ""
        echo "GETTING NAILS SKELETON"
        echo "----------------------"
        curl -LOk https://github.com/nails/skeleton-app/archive/master.zip
        unzip -q master.zip
        mv skeleton-app-master/* ./
        mv skeleton-app-master/.* ./
        rm -f master.zip
        rmdir skeleton-app-master


        if [ ! -f "./build.sh" ]
            echo ""
            echo ""
            echo "BUILD"
            echo "---------------"
            ./build.sh
        fi

        echo ""
        echo ""
        echo "PREPARING REPOSITORY"
        echo "--------------------"
        git flow init -d

        echo ""
        echo ""
        echo "CLEANING UP"
        echo "-----------"
        echo "Complete!"
        echo ""

    else
        echo ""
        echo "Directory is not empty!"
        echo ""
    fi

else

    # ------------------
    # Pulls a copy of all the Nails repos from GitHub (for development)
    # ------------------
    if [ "$1" == "dev" ]
        then

        if [ "$2" == "pull" ]
            then

            if [ "$3" == "" ]
            then
                subdir="."
            else
                subdir="$3"
            fi

            # Fetch an uptodate list of Nails repositories, loop through it
            # and clone/pull as required then checkout develop branch
            echo ""
            echo ""
            echo -e "${TITLE}UPDATING LIST OF REPOSITORIES${NC}"
            echo "-----------------------------"
            curl https://api.github.com/orgs/nails/repos?page=1 > repos-page1.json
            curl https://api.github.com/orgs/nails/repos?page=2 > repos-page2.json
            curl https://api.github.com/orgs/nails/repos?page=3 > repos-page3.json

            echo ""
            echo ""
            echo -e "${TITLE}UPDATING REPOSITORIES${NC}"
            echo "---------------------"

            parseJson()
            {
                jq -rc ".[]" $1 | while read -r json ; do

                    NAME=$(echo $json | jq -r ".name");
                    ARCHIVED=$(echo $json | jq -r ".archived")

                    if [ "$ARCHIVED" == "false" ]; then

                        echo ""
                        echo -e "[ ${COMMENT}nails/$NAME${NC} ]"
                        echo "------------------------------------"

                        # Test if the .git directory exists
                        if [ -d "$subdir/$NAME/.git" ]; then

                            cd "$subdir/$NAME"

                            echo -e "${BOLD_COMMENT}Checking out develop branch${NC}"
                            git checkout develop

                            echo -e "${BOLD_COMMENT}Pulling latest changes${NC}"
                            git pull origin develop

                        else

                            echo -e "${BOLD_COMMENT}Cloning${NC}"
                            git clone https://github.com/nails/$NAME.git "$subdir/$NAME" > /dev/null 2>&1

                            cd "$subdir/$NAME"

                            echo -e "${BOLD_COMMENT}Checking out develop branch${NC}"
                            git checkout develop
                        fi

                        cd $curDir

                    else
                        if [ -d "$subdir/$NAME" ]; then
                            echo ""
                            echo -e "[ ${COMMENT}nails/$NAME${NC} ]"
                            echo "------------------------------------"
                            echo -e "${ERROR}Removing archived repository${NC}"
                            rm -rf "$subdir/$NAME"
                        fi
                    fi

                done
            }

            # Run once per file
            parseJson repos-page1.json
            parseJson repos-page2.json
            parseJson repos-page3.json

        else
            echo ""
            echo "Please specify a command for dev."
            echo ""
            echo "You can use:"
            echo ""
            echo "pull - Clones/pulls all public repositories from the Nails GitHub organisation and"
            echo "       checks out the develop branch. Optionally provide a third argument which is a subdirectory"
            echo "       where repos should be updated or cloned into."
            echo ""
        fi

    # ------------------
    # shows the version number
    # ------------------
    elif [ "$1" == "--version" ] || [ "$1" == "-v" ]
        then
        echo ""
        echo -e "Nails Command Line tool ${COMMENT}$version${NC}"
        echo ""

    # ------------------
    # Shows the tool's help
    # ------------------
    elif [ "$1" == "help" ]
        then
        echo ""
        echo "This tool wraps the bundled console application. In addition it provides the following commands:"
        echo ""
        echo -e "${COMMENT}new${NC}            - Creates a new empty Nails site and builds it."
        echo -e "${COMMENT}dev${NC}            - Contains useful tools for Nails development."
        echo -e "${COMMENT}help${NC}           - Shows this help text."
        echo -e "${COMMENT}--version (-v)${NC} - Displays version information for this tool."
        echo ""

    # ------------------
    # Calls the console application, passing all parameters
    # ------------------
    else
        if [ ! -f "$consolePath" ]
            then

            echo ""
            echo ""
            echo -e "${ERROR}Not a Nails application or nails/module-console is not installed.${NC}"
            echo ""
            echo ""

        else
            php "$consolePath" "$@"
        fi
    fi
fi